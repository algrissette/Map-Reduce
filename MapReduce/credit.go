package main

import (
	"cs350/mr"
	"encoding/csv"
	"strconv"
	"strings"
)

// Struct to represent a credit record
type CreditRecord struct {
	UserID      string
	Agency      string
	Year        string
	CreditScore string
}

// The map function is called once for each file of input.
func Map(filename string, contents string) []mr.KeyValue {
	// Parse the CSV contents
	reader := csv.NewReader(strings.NewReader(contents))
	records, err := reader.ReadAll()
	if err != nil {
		panic(err)
	}

	// Initialize a slice to hold key/value pairs
	kva := make([]mr.KeyValue, 0)

	// Iterate through each record
	for _, record := range records {
		// Parse the credit record
		creditRecord := CreditRecord{
			UserID:      record[0],
			Agency:      record[1],
			Year:        record[2],
			CreditScore: record[3],
		}

		// Check if the credit score in 2023 was larger than 400
		if creditRecord.Year == "2023" && creditScoreGreaterThan400(creditRecord.CreditScore) {
			// Emit the agency as the key and "1" as the value
			kva = append(kva, mr.KeyValue{Key: creditRecord.Agency, Value: "1"})
		}
	}

	return kva
}

// Helper function to check if the credit score is greater than 400
func creditScoreGreaterThan400(score string) bool {
	creditScore, err := strconv.Atoi(score)
	if err != nil {
		panic(err)
	}
	return creditScore > 400
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// Compute the total number of people per agency
	count := len(values)
	return strconv.Itoa(count)
}
